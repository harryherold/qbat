/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: 
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef UPOWER_DEVICE_H
#define UPOWER_DEVICE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.UPower.Device
 */
class OrgFreedesktopUPowerDeviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.UPower.Device"; }

public:
    OrgFreedesktopUPowerDeviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopUPowerDeviceInterface();

    Q_PROPERTY(double Capacity READ capacity)
    inline double capacity() const
    { return qvariant_cast< double >(property("Capacity")); }

    Q_PROPERTY(double Energy READ energy)
    inline double energy() const
    { return qvariant_cast< double >(property("Energy")); }

    Q_PROPERTY(double EnergyEmpty READ energyEmpty)
    inline double energyEmpty() const
    { return qvariant_cast< double >(property("EnergyEmpty")); }

    Q_PROPERTY(double EnergyFull READ energyFull)
    inline double energyFull() const
    { return qvariant_cast< double >(property("EnergyFull")); }

    Q_PROPERTY(double EnergyFullDesign READ energyFullDesign)
    inline double energyFullDesign() const
    { return qvariant_cast< double >(property("EnergyFullDesign")); }

    Q_PROPERTY(double EnergyRate READ energyRate)
    inline double energyRate() const
    { return qvariant_cast< double >(property("EnergyRate")); }

    Q_PROPERTY(bool HasHistory READ hasHistory)
    inline bool hasHistory() const
    { return qvariant_cast< bool >(property("HasHistory")); }

    Q_PROPERTY(bool HasStatistics READ hasStatistics)
    inline bool hasStatistics() const
    { return qvariant_cast< bool >(property("HasStatistics")); }

    Q_PROPERTY(QString IconName READ iconName)
    inline QString iconName() const
    { return qvariant_cast< QString >(property("IconName")); }

    Q_PROPERTY(bool IsPresent READ isPresent)
    inline bool isPresent() const
    { return qvariant_cast< bool >(property("IsPresent")); }

    Q_PROPERTY(bool IsRechargeable READ isRechargeable)
    inline bool isRechargeable() const
    { return qvariant_cast< bool >(property("IsRechargeable")); }

    Q_PROPERTY(double Luminosity READ luminosity)
    inline double luminosity() const
    { return qvariant_cast< double >(property("Luminosity")); }

    Q_PROPERTY(QString Model READ model)
    inline QString model() const
    { return qvariant_cast< QString >(property("Model")); }

    Q_PROPERTY(QString NativePath READ nativePath)
    inline QString nativePath() const
    { return qvariant_cast< QString >(property("NativePath")); }

    Q_PROPERTY(bool Online READ online)
    inline bool online() const
    { return qvariant_cast< bool >(property("Online")); }

    Q_PROPERTY(double Percentage READ percentage)
    inline double percentage() const
    { return qvariant_cast< double >(property("Percentage")); }

    Q_PROPERTY(bool PowerSupply READ powerSupply)
    inline bool powerSupply() const
    { return qvariant_cast< bool >(property("PowerSupply")); }

    Q_PROPERTY(QString Serial READ serial)
    inline QString serial() const
    { return qvariant_cast< QString >(property("Serial")); }

    Q_PROPERTY(uint State READ state)
    inline uint state() const
    { return qvariant_cast< uint >(property("State")); }

    Q_PROPERTY(uint Technology READ technology)
    inline uint technology() const
    { return qvariant_cast< uint >(property("Technology")); }

    Q_PROPERTY(double Temperature READ temperature)
    inline double temperature() const
    { return qvariant_cast< double >(property("Temperature")); }

    Q_PROPERTY(qlonglong TimeToEmpty READ timeToEmpty)
    inline qlonglong timeToEmpty() const
    { return qvariant_cast< qlonglong >(property("TimeToEmpty")); }

    Q_PROPERTY(qlonglong TimeToFull READ timeToFull)
    inline qlonglong timeToFull() const
    { return qvariant_cast< qlonglong >(property("TimeToFull")); }

    Q_PROPERTY(uint Type READ type)
    inline uint type() const
    { return qvariant_cast< uint >(property("Type")); }

    Q_PROPERTY(qulonglong UpdateTime READ updateTime)
    inline qulonglong updateTime() const
    { return qvariant_cast< qulonglong >(property("UpdateTime")); }

    Q_PROPERTY(QString Vendor READ vendor)
    inline QString vendor() const
    { return qvariant_cast< QString >(property("Vendor")); }

    Q_PROPERTY(double Voltage READ voltage)
    inline double voltage() const
    { return qvariant_cast< double >(property("Voltage")); }

    Q_PROPERTY(uint WarningLevel READ warningLevel)
    inline uint warningLevel() const
    { return qvariant_cast< uint >(property("WarningLevel")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Refresh()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Refresh"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
